/// <reference types="node" />
import { type BinaryLike, type BinaryLikeNode } from './Utils';
import type { CipherCCMOptions, CipherCCMTypes, CipherGCMTypes, CipherGCMOptions, CipherOCBOptions, CipherOCBTypes, DecipherGCM, DecipherOCB, DecipherCCM, CipherCCM, CipherOCB, CipherGCM } from 'crypto';
import { Buffer } from '@craftzdog/react-native-buffer';
import { CryptoKey, type CryptoKeyPair, type KeyPairType } from './keys';
import type { KeyObjectHandle } from './NativeQuickCrypto/webcrypto';
export declare enum ECCurve {
    OPENSSL_EC_EXPLICIT_CURVE = 0,
    OPENSSL_EC_NAMED_CURVE = 1
}
export declare function createDecipher(algorithm: CipherCCMTypes, password: BinaryLikeNode, options: CipherCCMOptions): DecipherCCM;
export declare function createDecipher(algorithm: CipherGCMTypes, password: BinaryLikeNode, options?: CipherGCMOptions): DecipherGCM;
export declare function createDecipheriv(algorithm: CipherCCMTypes, key: BinaryLikeNode, iv: BinaryLike, options: CipherCCMOptions): DecipherCCM;
export declare function createDecipheriv(algorithm: CipherOCBTypes, key: BinaryLikeNode, iv: BinaryLike, options: CipherOCBOptions): DecipherOCB;
export declare function createDecipheriv(algorithm: CipherGCMTypes, key: BinaryLikeNode, iv: BinaryLike, options?: CipherGCMOptions): DecipherGCM;
export declare function createCipher(algorithm: CipherCCMTypes, password: BinaryLikeNode, options: CipherCCMOptions): CipherCCM;
export declare function createCipher(algorithm: CipherGCMTypes, password: BinaryLikeNode, options?: CipherGCMOptions): CipherGCM;
export declare function createCipheriv(algorithm: CipherCCMTypes, key: BinaryLikeNode, iv: BinaryLike, options: CipherCCMOptions): CipherCCM;
export declare function createCipheriv(algorithm: CipherOCBTypes, key: BinaryLikeNode, iv: BinaryLike, options: CipherOCBOptions): CipherOCB;
export declare function createCipheriv(algorithm: CipherGCMTypes, key: BinaryLikeNode, iv: BinaryLike, options?: CipherGCMOptions): CipherGCM;
export declare const publicEncrypt: (options: {
    key: any;
    encoding?: string;
    format?: any;
    padding?: any;
    oaepHash?: any;
    oaepLabel?: any;
    passphrase?: string;
}, buffer: BinaryLike) => Buffer;
export declare const publicDecrypt: (options: {
    key: any;
    encoding?: string;
    format?: any;
    padding?: any;
    oaepHash?: any;
    oaepLabel?: any;
    passphrase?: string;
}, buffer: BinaryLike) => Buffer;
export declare const privateDecrypt: (options: {
    key: any;
    encoding?: string;
    format?: any;
    padding?: any;
    oaepHash?: any;
    oaepLabel?: any;
    passphrase?: string;
}, buffer: BinaryLike) => Buffer;
export type GenerateKeyPairOptions = {
    modulusLength?: number;
    publicExponent?: number;
    hashAlgorithm?: string;
    mgf1HashAlgorithm?: string;
    saltLength?: number;
    divisorLength?: number;
    namedCurve?: string;
    prime?: Buffer;
    primeLength?: number;
    generator?: number;
    groupName?: string;
    publicKeyEncoding?: any;
    privateKeyEncoding?: any;
    paramEncoding?: string;
    hash?: any;
    mgf1Hash?: any;
};
export type KeyPairKey = Buffer | KeyObjectHandle | CryptoKey | undefined;
export type GenerateKeyPairReturn = [
    error?: Error,
    privateKey?: KeyPairKey,
    publicKey?: KeyPairKey
];
export type GenerateKeyPairCallback = (error?: Error, publicKey?: KeyPairKey, privateKey?: KeyPairKey) => GenerateKeyPairReturn | void;
export type KeyPair = {
    publicKey?: KeyPairKey;
    privateKey?: KeyPairKey;
};
export type GenerateKeyPairPromiseReturn = [error?: Error, keypair?: KeyPair];
export declare const generateKeyPair: (type: KeyPairType, options: GenerateKeyPairOptions, callback: GenerateKeyPairCallback) => void;
export declare const generateKeyPairPromise: (type: KeyPairType, options: GenerateKeyPairOptions) => Promise<GenerateKeyPairPromiseReturn>;
export declare function generateKeyPairSync(type: KeyPairType): CryptoKeyPair;
export declare function generateKeyPairSync(type: KeyPairType, options: GenerateKeyPairOptions): CryptoKeyPair;
//# sourceMappingURL=Cipher.d.ts.map