{"version":3,"file":"metro.js","sourceRoot":"","sources":["../../src/metro.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,sCA0BC;AAMD,gDAIC;AAnED,0DAKgC;AAChC,4DAA2E;AAE3E,0DAAiE;AAAxD,0HAAA,uBAAuB,OAAA;AAOhC;;;;;;;;;;;;;;;GAeG;AACH,SAAgB,aAAa,CAAC,MAAmB,EAAE,OAA8B;;IAA9B,wBAAA,EAAA,YAA8B;IAC/E,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;IACvC,IAAM,kBAAkB,GAAG,MAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,gBAAgB,mCAAI,CAAC,cAAO,CAAC,CAAC,CAAC;IAE7E,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;IAED,IAAM,SAAS,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,mCAAI,IAAA,8BAAY,EAAC,WAAW,CAAC,CAAC;IAClE,IAAM,WAAW,GAAG,IAAA,qCAAkB,EAAC,MAAM,CAAC,CAAC;IAE/C,8FAA8F;IAC9F,IAAA,sCAAoB,EAAC,SAAS,CAAC,CAAC;IAEhC,mBAAmB;IACnB,MAAM,CAAC,UAAU,CAAC,gBAAgB,GAAG,UAAC,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,gBAAgB;QACnF,2EAA2E;QAC3E,IAAA,iCAAe,EACb,SAAS,EACT,IAAA,+BAAY,EAAC,EAAE,WAAW,aAAA,EAAE,UAAU,YAAA,EAAE,UAAU,YAAA,EAAE,KAAK,OAAA,EAAE,gBAAgB,kBAAA,EAAE,WAAW,aAAA,EAAE,CAAC,CAC5F,CAAC;QAEF,OAAO,kBAAkB,CAAC,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,gBAAgB,CAAC,CAAC;IAC7E,CAAC,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;GAGG;AACH,SAAsB,kBAAkB,CAAC,WAAmB;;;;;;oBACpD,QAAQ,GAAG,IAAA,8BAAY,EAAC,WAAW,CAAC,CAAC;oBAC3C,qBAAM,IAAA,iCAAe,EAAC,QAAQ,CAAC,EAAA;;oBAA/B,SAA+B,CAAC;oBAChC,sBAAO,QAAQ,EAAC;;;;CACjB","sourcesContent":["import { type MetroConfig } from 'metro-config';\n\nimport {\n  createAtlasFile,\n  ensureAtlasFileExist,\n  getAtlasPath,\n  writeAtlasEntry,\n} from './data/AtlasFileSource';\nimport { convertGraph, convertMetroConfig } from './data/MetroGraphSource';\n\nexport { waitUntilAtlasFileReady } from './data/AtlasFileSource';\n\ntype ExpoAtlasOptions = Partial<{\n  /** The output of the atlas file, defaults to `.expo/atlas.json` */\n  atlasFile: string;\n}>;\n\n/**\n * Initialize Expo Atlas to gather statistics from Metro when exporting bundles.\n * This function adds the required Metro config, and should be the last config mutation.\n *\n * @example ```js\n *   // Learn more https://docs.expo.dev/guides/customizing-metro\n *   const { getDefaultConfig } = require('expo/metro-config')\n *   const { withExpoAtlas } = require('expo-atlas/metro')\n *\n *   const config = getDefaultConfig(__dirname)\n *\n *   // Make more changes\n *\n *   module.exports = withExpoAtlas(config)\n * ```\n */\nexport function withExpoAtlas(config: MetroConfig, options: ExpoAtlasOptions = {}) {\n  const projectRoot = config.projectRoot;\n  const originalSerializer = config.serializer?.customSerializer ?? (() => {});\n\n  if (!projectRoot) {\n    throw new Error('No \"projectRoot\" configured in Metro config.');\n  }\n\n  const atlasFile = options?.atlasFile ?? getAtlasPath(projectRoot);\n  const metroConfig = convertMetroConfig(config);\n\n  // Note(cedric): we don't have to await this, Metro would never bundle before this is finishes\n  ensureAtlasFileExist(atlasFile);\n\n  // @ts-expect-error\n  config.serializer.customSerializer = (entryPoint, preModules, graph, serializeOptions) => {\n    // Note(cedric): we don't have to await this, it has a built-in write queue\n    writeAtlasEntry(\n      atlasFile,\n      convertGraph({ projectRoot, entryPoint, preModules, graph, serializeOptions, metroConfig })\n    );\n\n    return originalSerializer(entryPoint, preModules, graph, serializeOptions);\n  };\n\n  return config;\n}\n\n/**\n * Fully reset, or recreate, the Expo Atlas file containing all Metro information.\n * This method should only be called once per exporting session, to avoid overwriting data with mutliple Metro instances.\n */\nexport async function resetExpoAtlasFile(projectRoot: string) {\n  const filePath = getAtlasPath(projectRoot);\n  await createAtlasFile(filePath);\n  return filePath;\n}\n"]}