{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../src/cli.ts"],"names":[],"mappings":";;AAmBA,8DA4BC;AA7CD,4DAA+E;AAC/E,iDAA2D;AAE3D;;;;;;;;;;;;;GAaG;AACH,SAAgB,yBAAyB,CAAC,MAAmB;;IAC3D,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;IAEvC,IAAM,MAAM,GAAG,IAAI,mCAAgB,EAAE,CAAC;IACtC,IAAM,UAAU,GAAG,IAAA,kCAAqB,EAAC,MAAM,CAAC,CAAC;IAEjD,IAAM,qBAAqB,GAAG,MAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,gBAAgB,mCAAI,CAAC,cAAO,CAAC,CAAC,CAAC;IAChF,IAAM,WAAW,GAAG,IAAA,qCAAkB,EAAC,MAAM,CAAC,CAAC;IAE/C,0DAA0D;IAC1D,MAAM,CAAC,UAAU,CAAC,gBAAgB,GAAG,UAAC,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,gBAAgB;QACnF,MAAM,CAAC,cAAc,CAAC;YACpB,UAAU,YAAA;YACV,KAAK,OAAA;YACL,WAAW,aAAA;YACX,UAAU,YAAA;YACV,WAAW,aAAA;YACX,gBAAgB,kBAAA;SACjB,CAAC,CAAC;QACH,OAAO,qBAAqB,CAAC,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,gBAAgB,CAAC,CAAC;IAChF,CAAC,CAAC;IAEF,OAAO;QACL,MAAM,QAAA;QACN,UAAU,YAAA;QACV,yFAAyF;QACzF,aAAa,gBAAI,CAAC;KACnB,CAAC;AACJ,CAAC","sourcesContent":["import type { ConfigT as MetroConfig } from 'metro-config';\n\nimport { MetroGraphSource, convertMetroConfig } from './data/MetroGraphSource';\nimport { createAtlasMiddleware } from './utils/middleware';\n\n/**\n * Iniitalize Expo Atlas to gather statistics from Metro when exporting bundles.\n * This function adds the required Metro config, and should be used inside the Expo CLI.\n *\n * @example ```js\n *   const atlasFromProject = requireFrom(projectRoot, 'expo-atlas/cli');\n *   const atlas = atlasFromProject?.createExpoAtlasMiddleware(config);\n *\n *   if (atlas) {\n *     // Register the Atlas middleware, to serve the UI and API.\n *     middleware.use('/_expo/atlas', atlasFromProject.middleware);\n *   }\n * ```\n */\nexport function createExpoAtlasMiddleware(config: MetroConfig) {\n  const projectRoot = config.projectRoot;\n\n  const source = new MetroGraphSource();\n  const middleware = createAtlasMiddleware(source);\n\n  const metroCustomSerializer = config.serializer?.customSerializer ?? (() => {});\n  const metroConfig = convertMetroConfig(config);\n\n  // @ts-expect-error Should still be writable at this stage\n  config.serializer.customSerializer = (entryPoint, preModules, graph, serializeOptions) => {\n    source.serializeGraph({\n      entryPoint,\n      graph,\n      metroConfig,\n      preModules,\n      projectRoot,\n      serializeOptions,\n    });\n    return metroCustomSerializer(entryPoint, preModules, graph, serializeOptions);\n  };\n\n  return {\n    source,\n    middleware,\n    /** @deprecated This method does nothing and will be removed in the next major version */\n    registerMetro() {},\n  };\n}\n"]}