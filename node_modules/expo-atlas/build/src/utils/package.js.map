{"version":3,"file":"package.js","sourceRoot":"","sources":["../../../src/utils/package.ts"],"names":[],"mappings":";;AAQA,wDAYC;AApBD,iCAA6C;AAE7C,6GAA6G;AAC7G,IAAM,yBAAyB,GAAG,mDAAmD,CAAC;AACtF,0EAA0E;AAC1E,IAAM,gBAAgB,GAAG,IAAI,GAAG,EAAkB,CAAC;AAEnD,iFAAiF;AACjF,SAAgB,sBAAsB,CAAC,IAAY;;IACjD,IAAM,SAAS,GAAG,IAAA,0BAAkB,EAAC,IAAI,CAAC,CAAC;IAC3C,IAAM,WAAW,GAAG,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,WAAW;QAAE,OAAO,WAAW,CAAC;IAE9B,IAAA,KAAiB,MAAA,SAAS,CAAC,KAAK,CAAC,yBAAyB,CAAC,mCAAI,EAAE,EAAhE,MAAM,QAAA,EAAE,IAAI,QAAoD,CAAC;IACxE,IAAI,IAAI,EAAE,CAAC;QACT,gBAAgB,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { convertPathToPosix } from './paths';\n\n/** Pattern to match the last `node_modules/@<org>/<name>` or `node_modules/<name>` occurrence in a string */\nconst NODE_MODULES_NAME_PATTERN = /(?:.*\\/)?node_modules\\/((?:@[^/]+\\/[^/]+)|[^/]+)/i;\n/** A simple map to return previously resolved package names from paths */\nconst packageNameCache = new Map<string, string>();\n\n/** Get the package name from absolute path, if the file belongs to a package. */\nexport function getPackageNameFromPath(path: string) {\n  const posixPath = convertPathToPosix(path);\n  const packageName = packageNameCache.get(posixPath);\n  if (packageName) return packageName;\n\n  const [_match, name] = posixPath.match(NODE_MODULES_NAME_PATTERN) ?? [];\n  if (name) {\n    packageNameCache.set(posixPath, name);\n    return name;\n  }\n\n  return undefined;\n}\n"]}