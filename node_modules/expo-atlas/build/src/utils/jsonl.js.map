{"version":3,"file":"jsonl.js","sourceRoot":"","sources":["../../../src/utils/jsonl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,4CAiBC;AAQD,sCAeC;AAGD,wCAQC;AAhED,kDAA4B;AAC5B,0CAAoB;AACpB,sDAAgC;AAChC,kDAA4B;AAC5B,yDAAwD;AACxD,iDAAgD;AAEhD;;;;;GAKG;AACH,SAAsB,gBAAgB,CACpC,QAAgB,EAChB,QAAsF;;;;;;oBAEhF,KAAK,GAAG,YAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBACtC,MAAM,GAAG,kBAAQ,CAAC,eAAe,CAAC,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;oBAC/C,UAAU,GAAG,CAAC,CAAC;oBAEnB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAK;wBACvB,MAAM,KAAK,CAAC;oBACd,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,QAAQ;wBACzB,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE,MAAM,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;oBAEH,qBAAM,gBAAM,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;oBAAlC,SAAkC,CAAC;;;;;CACpC;AAED;;;;;GAKG;AACH,SAAsB,aAAa,CAAU,QAAgB,EAAE,UAAkB;;;;;;oBAC3E,WAAW,GAAG,EAAE,CAAC;oBAErB,qBAAM,gBAAgB,CAAC,QAAQ,EAAE,UAAC,OAAO,EAAE,IAAI,EAAE,MAAM;4BACrD,IAAI,IAAI,KAAK,UAAU,EAAE,CAAC;gCACxB,WAAW,GAAG,OAAO,CAAC;gCACtB,MAAM,CAAC,KAAK,EAAE,CAAC;4BACjB,CAAC;wBACH,CAAC,CAAC,EAAA;;oBALF,SAKE,CAAC;oBAEH,IAAI,CAAC,WAAW,EAAE,CAAC;wBACjB,MAAM,IAAI,KAAK,CAAC,eAAQ,UAAU,iCAAuB,QAAQ,CAAE,CAAC,CAAC;oBACvE,CAAC;oBAED,sBAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAC;;;;CAChC;AAED,8EAA8E;AAC9E,SAAsB,cAAc,CAAC,QAAgB,EAAE,IAAa;;;;;;oBAC5D,KAAK,GAAG,gBAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;oBAClE,MAAM,GAAG,YAAE,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;oBAE9D,KAAK,CAAC,IAAI,CAAC,IAAA,2BAAY,GAAE,CAAC,CAAC,IAAI,CAAC,IAAA,mBAAQ,GAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEzD,qBAAM,gBAAM,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAA;;oBAAnC,SAAmC,CAAC;oBACpC,qBAAM,YAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,EAAA;;oBAArD,SAAqD,CAAC;;;;;CACvD","sourcesContent":["import events from 'events';\nimport fs from 'fs';\nimport readline from 'readline';\nimport stream from 'stream';\nimport { disassembler } from 'stream-json/Disassembler';\nimport { stringer } from 'stream-json/Stringer';\n\n/**\n * Iterate through lines of a ndjson/jsonl file using streams.\n * This won't parse the actual JSON but invokes the callback for each line.\n *\n * @note Line numbers starts at `1`\n */\nexport async function forEachJsonLines(\n  filePath: string,\n  callback: (lineContent: string, lineNumber: number, reader: readline.Interface) => any\n) {\n  const input = fs.createReadStream(filePath);\n  const reader = readline.createInterface({ input });\n  let lineNumber = 1;\n\n  reader.on('error', (error) => {\n    throw error;\n  });\n\n  reader.on('line', (contents) => {\n    callback(contents, lineNumber++, reader);\n  });\n\n  await events.once(reader, 'close');\n}\n\n/**\n * Parse a single line of a jsonl/ndjson file using streams.\n * Once the line is found, iteration is stopped and the parsed JSON is returned.\n *\n * @note Line numbers starts at `1`\n */\nexport async function parseJsonLine<T = any>(filePath: string, lineNumber: number): Promise<T> {\n  let lineContent = '';\n\n  await forEachJsonLines(filePath, (content, line, reader) => {\n    if (line === lineNumber) {\n      lineContent = content;\n      reader.close();\n    }\n  });\n\n  if (!lineContent) {\n    throw new Error(`Line ${lineNumber} not found in file: ${filePath}`);\n  }\n\n  return JSON.parse(lineContent);\n}\n\n/** Append a single line of json data to a jsonl/ndjson file using streams. */\nexport async function appendJsonLine(filePath: string, data: unknown): Promise<void> {\n  const input = stream.Readable.from([data] as any, { objectMode: true });\n  const output = fs.createWriteStream(filePath, { flags: 'a' });\n\n  input.pipe(disassembler()).pipe(stringer()).pipe(output);\n\n  await events.once(output, 'finish');\n  await fs.promises.appendFile(filePath, '\\n', 'utf-8');\n}\n"]}