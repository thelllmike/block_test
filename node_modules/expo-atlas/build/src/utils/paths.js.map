{"version":3,"file":"paths.js","sourceRoot":"","sources":["../../../src/utils/paths.ts"],"names":[],"mappings":";;;;;AAGA,gDAEC;AAOD,wCAwBC;AApCD,8CAAwB;AAExB,uCAAuC;AACvC,SAAgB,kBAAkB,CAAC,IAAY;IAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAC/D,CAAC;AAED;;;;GAIG;AACH,SAAgB,cAAc,CAAC,KAAe;IAC5C,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,UAAU,GAAa,EAAE,CAAC;IAE9B,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE,CAAC;QAAtB,IAAM,IAAI,cAAA;QACb,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,cAAI,CAAC,GAAG,CAAC,CAAC;QAEtC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YACvB,UAAU,GAAG,QAAQ,CAAC;YACtB,SAAS;QACX,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3C,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;gBAClC,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpC,MAAM;YACR,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,UAAU,CAAC,IAAI,CAAC,cAAI,CAAC,GAAG,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import path from 'path';\n\n/** Format the path in posix format. */\nexport function convertPathToPosix(path: string) {\n  return path.includes('\\\\') ? path.replace(/\\\\/g, '/') : path;\n}\n\n/**\n * Find the shared root of all provided paths.\n * This will split all paths by segments and find the longest common prefix.\n * Note, this works for both posix and non-posix paths.\n */\nexport function findSharedRoot(paths: string[]) {\n  if (!paths.length) {\n    return null;\n  }\n\n  let sharedRoot: string[] = [];\n\n  for (const item of paths) {\n    const segments = item.split(path.sep);\n\n    if (!sharedRoot.length) {\n      sharedRoot = segments;\n      continue;\n    }\n\n    for (let i = 0; i < sharedRoot.length; i++) {\n      if (sharedRoot[i] !== segments[i]) {\n        sharedRoot = sharedRoot.slice(0, i);\n        break;\n      }\n    }\n  }\n\n  return sharedRoot.join(path.sep);\n}\n"]}