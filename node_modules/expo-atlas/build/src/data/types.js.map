{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/data/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { MixedOutput } from 'metro';\n\nexport interface AtlasSource {\n  /** List the partial data of all available bundles */\n  listBundles(): PartialAtlasBundle[] | Promise<PartialAtlasBundle[]>;\n  /** Load the full entry, by reference */\n  getBundle(ref: string): AtlasBundle | Promise<AtlasBundle>;\n\n  hasHmrSupport(): boolean;\n  getBundleHmr(ref: string): null | AtlasBundleHmr;\n}\n\nexport type PartialAtlasBundle = Pick<\n  AtlasBundle,\n  'id' | 'platform' | 'projectRoot' | 'sharedRoot' | 'entryPoint' | 'environment'\n>;\n\nexport type AtlasBundle = {\n  /** The unique reference or ID to this entry */\n  id: string;\n  /** The platform for which the bundle was created */\n  platform: 'android' | 'ios' | 'web' | 'unknown';\n  /** The environment this bundle is compiled for */\n  environment: 'client' | 'dom' | 'node' | 'react-server';\n  /** The absolute path to the root of the project */\n  projectRoot: string;\n  /** The absolute path to the shared root of all imported modules */\n  sharedRoot: string;\n  /** The absolute path to the entry point used when creating the bundle */\n  entryPoint: string;\n  /** All known modules that are prepended for the runtime itself */\n  runtimeModules: AtlasModule[];\n  /** All known modules imported within the bundle, stored by absolute path */\n  modules: Map<string, AtlasModule>;\n  /** The sarialization options used for this bundle */\n  serializeOptions?: Record<string, any>;\n  /** The transformation options used for this bundle */\n  transformOptions?: Record<string, any>;\n};\n\nexport type AtlasBundleHmr = {\n  bundleId: AtlasBundle['id'];\n  socketUrl: string | URL;\n  entryPoints: string[];\n};\n\nexport type AtlasModule = {\n  /** The internal module ID given by Metro */\n  id: number | string;\n  /** The absoluate path of this module, in the platform-original format */\n  absolutePath: string;\n  /** The relative path of this module, to the shared root of the bundle, in posix format */\n  relativePath: string;\n  /** The name of the package this module belongs to, if from an external package */\n  package?: string;\n  /** The original module size, in bytes */\n  size: number;\n  /** Absolute file paths of modules imported inside this module */\n  imports: AtlasModuleRef[];\n  /** All modules importing this module */\n  importedBy: AtlasModuleRef[];\n  /** The original source code, as a buffer or string */\n  source?: string;\n  /** The transformed output source code */\n  output?: MixedOutput[];\n};\n\nexport type AtlasModuleRef = Pick<AtlasModule, 'id' | 'absolutePath' | 'relativePath' | 'package'>;\n"]}