{"version":3,"file":"MetroGraphSource.js","sourceRoot":"","sources":["../../../src/data/MetroGraphSource.ts"],"names":[],"mappings":"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","sourcesContent":["import type metro from 'metro';\nimport type { MetroConfig } from 'metro-config';\nimport path from 'path';\n\nimport type { AtlasBundle, AtlasModule, AtlasSource } from './types';\nimport { bufferIsUtf8 } from '../utils/buffer';\nimport { getUrlFromJscSafeUrl } from '../utils/jsc';\nimport { getPackageNameFromPath } from '../utils/package';\nimport { convertPathToPosix, findSharedRoot } from '../utils/paths';\n\ntype MetroGraph = metro.Graph | metro.ReadOnlyGraph;\ntype MetroModule = metro.Module;\n\ntype ConvertGraphToAtlasOptions = {\n  projectRoot: string;\n  entryPoint: string;\n  preModules: readonly MetroModule[];\n  graph: MetroGraph;\n  serializeOptions: Readonly<metro.SerializerOptions>;\n  /** Options passed-through from the Metro config */\n  metroConfig: {\n    watchFolders?: readonly string[];\n    resolver?: {\n      sourceExts?: readonly string[];\n      assetExts?: readonly string[];\n    };\n  };\n};\n\nexport class MetroGraphSource implements AtlasSource {\n  /** All known entries, and detected changes, stored by ID */\n  readonly entries: Map<AtlasBundle['id'], AtlasBundle> = new Map();\n\n  constructor() {\n    this.serializeGraph = this.serializeGraph.bind(this);\n  }\n\n  hasHmrSupport() {\n    return true;\n  }\n\n  getBundleHmr(id: string) {\n    // Get the required data from the bundle\n    const bundle = this.getBundle(id);\n    const bundleSourceUrl = bundle.serializeOptions?.sourceUrl;\n    if (!bundleSourceUrl) {\n      return null;\n    }\n\n    // Construct the HMR information, based on React Native\n    // See: https://github.com/facebook/react-native/blob/2eb7bcb8d9c0f239a13897e3a5d4397d81d3f627/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/devsupport/DevSupportManagerBase.java#L696-L702\n    const socketUrl = new URL('/hot', bundleSourceUrl);\n    // Fix the entry point URL query parameter to be compatible with the HMR server\n    const entryPoint = getUrlFromJscSafeUrl(bundleSourceUrl);\n\n    return {\n      bundleId: bundle.id,\n      socketUrl,\n      entryPoints: [entryPoint],\n    };\n  }\n\n  listBundles() {\n    return Array.from(this.entries.values()).map((bundle) => ({\n      id: bundle.id,\n      platform: bundle.platform,\n      environment: bundle.environment,\n      projectRoot: bundle.projectRoot,\n      sharedRoot: bundle.sharedRoot,\n      entryPoint: bundle.entryPoint,\n    }));\n  }\n\n  getBundle(id: string) {\n    const bundle = this.entries.get(id);\n    if (!bundle) throw new Error(`Bundle \"${id}\" not found.`);\n    return bundle;\n  }\n\n  /**\n   * Serializes the Metro graph, converting it to an Atlas entry.\n   * This also registers a listener to the Metro server to track changes, when possible.\n   * All data is kept in memory, where stale data is overwritten by new data.\n   */\n  serializeGraph(options: ConvertGraphToAtlasOptions) {\n    const bundle = convertGraph(options);\n    this.entries.set(bundle.id, bundle);\n    return bundle;\n  }\n}\n\n/** Convert options from the Metro config, used during graph conversions to Atlas */\nexport function convertMetroConfig(config: MetroConfig): ConvertGraphToAtlasOptions['metroConfig'] {\n  return {\n    watchFolders: config.watchFolders,\n    resolver: {\n      sourceExts: config.resolver?.sourceExts,\n      assetExts: config.resolver?.assetExts,\n    },\n  };\n}\n\n/** Convert a Metro graph instance to a JSON-serializable entry */\nexport function convertGraph(options: ConvertGraphToAtlasOptions): AtlasBundle {\n  const sharedRoot = getSharedRoot(options);\n  const platform = getPlatform(options) ?? 'unknown';\n  const environment = getEnvironment(options) ?? 'client';\n  const serializeOptions = convertSerializeOptions(options);\n  const transformOptions = convertTransformOptions(options);\n  const entryPoint = getEntryPoint(options, environment);\n\n  return {\n    id: Buffer.from(`${path.relative(sharedRoot, entryPoint)}+${platform}+${environment}`).toString(\n      'base64url'\n    ),\n    platform,\n    environment,\n    projectRoot: options.projectRoot,\n    sharedRoot,\n    entryPoint,\n    runtimeModules: options.preModules.map((module) => convertModule(options, module, sharedRoot)),\n    modules: collectEntryPointModules(options, sharedRoot),\n    serializeOptions,\n    transformOptions,\n  };\n}\n\n/** Find and collect all dependnecies related to the entrypoint within the graph */\nexport function collectEntryPointModules(\n  options: Pick<\n    ConvertGraphToAtlasOptions,\n    'graph' | 'entryPoint' | 'serializeOptions' | 'metroConfig'\n  >,\n  sharedRoot: string\n) {\n  const modules = new Map<string, AtlasModule>();\n\n  /** Discover and collect all files related to the provided module path */\n  function discover(modulePath: string) {\n    const module = options.graph.dependencies.get(modulePath);\n    if (module && !modules.has(modulePath) && !moduleIsVirtual(module)) {\n      modules.set(modulePath, convertModule(options, module, sharedRoot));\n      module.dependencies.forEach((modulePath) => discover(modulePath.absolutePath));\n    }\n  }\n\n  // Find and collect all modules related to the entry point\n  discover(options.entryPoint);\n\n  return modules;\n}\n\n/** Convert a Metro module to a JSON-serializable Atlas module */\nexport function convertModule(\n  options: Pick<ConvertGraphToAtlasOptions, 'graph' | 'metroConfig' | 'serializeOptions'>,\n  module: MetroModule,\n  sharedRoot: string\n): AtlasModule {\n  const { createModuleId } = options.serializeOptions;\n\n  return {\n    id: createModuleId(module.path),\n    absolutePath: module.path,\n    relativePath: convertPathToPosix(path.relative(sharedRoot, module.path)),\n    package: getPackageNameFromPath(module.path),\n    size: module.output.reduce((bytes, output) => bytes + Buffer.byteLength(output.data.code), 0),\n    imports: Array.from(module.dependencies.values()).map((module) => ({\n      id: createModuleId(module.absolutePath),\n      absolutePath: module.absolutePath,\n      relativePath: convertPathToPosix(path.relative(sharedRoot, module.absolutePath)),\n      package: getPackageNameFromPath(module.absolutePath),\n    })),\n    importedBy: Array.from(module.inverseDependencies)\n      .filter((path) => options.graph.dependencies.has(path))\n      .map((absolutePath) => ({\n        id: createModuleId(absolutePath),\n        absolutePath,\n        relativePath: convertPathToPosix(path.relative(sharedRoot, absolutePath)), // TODO\n        package: getPackageNameFromPath(absolutePath),\n      })),\n    source: getModuleSourceContent(options, module),\n    output: module.output.map((output) => ({\n      type: output.type,\n      data: { code: output.data.code },\n    })),\n  };\n}\n\n/**\n * Attempt to load the source file content from module.\n * If a file is an asset, it returns `[binary file]` instead.\n */\nfunction getModuleSourceContent(\n  options: Pick<ConvertGraphToAtlasOptions, 'metroConfig'>,\n  module: MetroModule\n) {\n  const fileExtension = path.extname(module.path).replace('.', '');\n\n  if (options.metroConfig.resolver?.sourceExts?.includes(fileExtension)) {\n    return module.getSource().toString();\n  }\n\n  if (options.metroConfig.resolver?.assetExts?.includes(fileExtension)) {\n    return '[binary file]';\n  }\n\n  if (module.path.includes('?ctx=')) {\n    return module.getSource().toString();\n  }\n\n  if (bufferIsUtf8(module.getSource())) {\n    return module.getSource().toString();\n  }\n\n  return '[binary file]';\n}\n\n/** Convert Metro transform options to a JSON-serializable object */\nexport function convertTransformOptions(\n  options: Pick<ConvertGraphToAtlasOptions, 'graph'>\n): AtlasBundle['transformOptions'] {\n  return options.graph.transformOptions ?? {};\n}\n\n/** Convert Metro serialize options to a JSON-serializable object */\nexport function convertSerializeOptions(\n  options: Pick<ConvertGraphToAtlasOptions, 'serializeOptions'>\n): AtlasBundle['serializeOptions'] {\n  const serializeOptions: AtlasBundle['serializeOptions'] = { ...options.serializeOptions };\n\n  // Delete all non-serializable functions\n  delete serializeOptions['processModuleFilter'];\n  delete serializeOptions['createModuleId'];\n  delete serializeOptions['getRunModuleStatement'];\n  delete serializeOptions['shouldAddToIgnoreList'];\n\n  return serializeOptions;\n}\n\n/** Get the shared root of `projectRoot` and `watchFolders`, used to make all paths within the bundle relative */\nfunction getSharedRoot(options: Pick<ConvertGraphToAtlasOptions, 'projectRoot' | 'metroConfig'>) {\n  const { watchFolders } = options.metroConfig;\n  return !watchFolders?.length\n    ? options.projectRoot\n    : (findSharedRoot([options.projectRoot, ...watchFolders]) ?? options.projectRoot);\n}\n\n/** Determine if the module is a virtual module, like shims or canaries, which should be excluded from results */\nfunction moduleIsVirtual(module: MetroModule) {\n  return module.path.startsWith('\\0');\n}\n\n/** Determine the bundle target environment based on the `transformOptions.customTransformOptions` */\nfunction getEnvironment(options: Pick<ConvertGraphToAtlasOptions, 'graph'>) {\n  const environment = options.graph.transformOptions?.customTransformOptions?.environment;\n\n  // Check if this graph is related to a DOM component\n  // NOTE(cedric): this is early/alpha support and may change in the future\n  if (\n    options.graph.transformOptions.platform === 'web' &&\n    !!options.graph.transformOptions.customTransformOptions?.dom\n  ) {\n    return 'dom' as AtlasBundle['environment'];\n  }\n\n  if (typeof environment === 'string') {\n    return environment as AtlasBundle['environment'];\n  }\n\n  return null;\n}\n\n/** Determine the bundle target platform based on the `transformOptions` */\nfunction getPlatform(options: Pick<ConvertGraphToAtlasOptions, 'graph'>) {\n  const platform = options.graph.transformOptions?.platform;\n\n  if (typeof platform === 'string') {\n    return platform as AtlasBundle['platform'];\n  }\n\n  return null;\n}\n\n/**\n * Determine if this graph is related to a DOM component, using the (custom) transform options.\n * @remarks - This is preliminary support, and may change in the future\n */\nfunction getEntryPoint(\n  options: ConvertGraphToAtlasOptions,\n  environment: AtlasBundle['environment'] = 'client'\n) {\n  return environment !== 'dom'\n    ? options.entryPoint\n    : path.join(\n        path.dirname(options.entryPoint),\n        options.graph.transformOptions.customTransformOptions!.dom as string\n      );\n}\n"]}