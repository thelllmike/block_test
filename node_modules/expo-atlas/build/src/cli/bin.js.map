{"version":3,"file":"bin.js","sourceRoot":"","sources":["../../../src/cli/bin.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport arg from 'arg';\nimport chalk from 'chalk';\nimport open from 'open';\nimport path from 'path';\n\nimport { createServer } from './createServer';\nimport { resolveOptions } from './resolveOptions';\n\nexport type Input = typeof args;\n\nconst args = arg({\n  // Types\n  '--help': Boolean,\n  '--port': Number,\n  '--version': Boolean,\n  '--no-open': Boolean,\n  // Aliases\n  '-h': '--help',\n  '-p': '--port',\n  '-v': '--version',\n});\n\nif (args['--version']) {\n  console.log(require('../../package.json').version);\n  process.exit(0);\n}\n\nif (args['--help']) {\n  printLines([\n    chalk.bold('Usage'),\n    `  ${chalk.dim('$')} expo-atlas ${chalk.dim('[atlas file]')}`,\n    '',\n    chalk.bold('Options'),\n    `  --port${chalk.dim(', -p')}      Port to listen on`,\n    `  --no-open       Do not open the browser automatically`,\n    `  --help${chalk.dim(', -h')}      Displays this message`,\n    `  --version${chalk.dim(', -v')}   Displays the current version`,\n  ]);\n  process.exit(0);\n}\n\nprocess.on('SIGINT', () => process.exit(0));\nprocess.on('SIGTERM', () => process.exit(0));\n\nasync function run() {\n  const options = await resolveOptions(args);\n  const server = createServer(options);\n\n  server.listen(options.port, () => {\n    const href = `http://localhost:${options.port}`;\n\n    printLines([\n      `Expo Atlas is ready on: ${chalk.underline(href)}`,\n      `  ${chalk.dim(`Using: ${options.atlasFile}`)}`,\n    ]);\n\n    if (options.browserOpen) {\n      open(href).catch((error) => {\n        console.error('Could not automatically open browser:', error.message);\n      });\n    }\n  });\n}\n\nfunction printLines(lines: string[]) {\n  console.log(`  ${lines.join('\\n  ')}`);\n}\n\nrun().catch((error) => {\n  if (error.type !== 'AtlasError') {\n    throw error;\n  }\n\n  if (error.code === 'ATLAS_FILE_INCOMPATIBLE') {\n    const atlasFile = path.relative(process.cwd(), error.filePath);\n    console.error('Atlas file is incompatible with this version, use this instead:');\n    console.error(`  npx expo-atlas@${error.incompatibleVersion} ${atlasFile}`);\n  } else {\n    console.error(`${error.message} (${error.code})`);\n  }\n\n  process.exit(1);\n});\n"]}