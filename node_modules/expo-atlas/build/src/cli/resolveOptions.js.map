{"version":3,"file":"resolveOptions.js","sourceRoot":"","sources":["../../../src/cli/resolveOptions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,wCAIC;AAZD,kEAAsC;AACtC,8CAAwB;AAGxB,2DAA0E;AAI1E,SAAsB,cAAc,CAAC,KAAY;;;;;wBAC7B,qBAAM,gBAAgB,CAAC,KAAK,CAAC,EAAA;;oBAAzC,SAAS,GAAG,SAA6B;oBAClC,qBAAM,WAAW,CAAC,KAAK,CAAC,EAAA;;oBAA/B,IAAI,GAAG,SAAwB;oBACrC,sBAAO,EAAE,SAAS,WAAA,EAAE,IAAI,MAAA,EAAE,WAAW,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE,EAAC;;;;CACtE;AAED,SAAe,gBAAgB,CAAC,KAAY;;;;;;;oBACpC,SAAS,GAAG,MAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,mCAAI,IAAA,8BAAY,EAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;oBAC5D,qBAAM,IAAA,mCAAiB,EAAC,SAAS,CAAC,EAAA;;oBAAlC,SAAkC,CAAC;oBACnC,sBAAO,cAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC;;;;CAChC;AAED,SAAe,WAAW,CAAC,KAA4B;;;;;;oBACrD,IAAI,KAAK,CAAC,QAAQ,CAAC;wBAAE,sBAAO,KAAK,CAAC,QAAQ,CAAC,EAAC;oBAE/B,qBAAM,IAAA,wBAAQ,EAAC,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE,CAAC,EAAA;;oBAA/D,IAAI,GAAG,SAAwD;oBACrE,IAAI,IAAI;wBAAE,sBAAO,IAAI,EAAC;oBAEtB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;;;;CAClE","sourcesContent":["import freeport from 'freeport-async';\nimport path from 'path';\n\nimport { type Input } from './bin';\nimport { getAtlasPath, validateAtlasFile } from '../data/AtlasFileSource';\n\nexport type Options = Awaited<ReturnType<typeof resolveOptions>>;\n\nexport async function resolveOptions(input: Input) {\n  const atlasFile = await resolveAtlasFile(input);\n  const port = await resolvePort(input);\n  return { atlasFile, port, browserOpen: input['--no-open'] !== true };\n}\n\nasync function resolveAtlasFile(input: Input) {\n  const atlasFile = input._[0] ?? getAtlasPath(process.cwd());\n  await validateAtlasFile(atlasFile);\n  return path.resolve(atlasFile);\n}\n\nasync function resolvePort(input: Pick<Input, '--port'>) {\n  if (input['--port']) return input['--port'];\n\n  const port = await freeport(3000, { hostnames: [null, 'localhost'] });\n  if (port) return port;\n\n  throw new Error(`Could not find a free port starting from 3000`);\n}\n"]}