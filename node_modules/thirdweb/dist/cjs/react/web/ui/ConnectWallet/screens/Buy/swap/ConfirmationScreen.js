"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectorLine = void 0;
exports.SwapConfirmationScreen = SwapConfirmationScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const pay_js_1 = require("../../../../../../../analytics/track/pay.js");
const contract_js_1 = require("../../../../../../../contract/contract.js");
const approve_js_1 = require("../../../../../../../extensions/erc20/write/approve.js");
const send_batch_transaction_js_1 = require("../../../../../../../transaction/actions/send-batch-transaction.js");
const send_transaction_js_1 = require("../../../../../../../transaction/actions/send-transaction.js");
const wait_for_tx_receipt_js_1 = require("../../../../../../../transaction/actions/wait-for-tx-receipt.js");
const CustomThemeProvider_js_1 = require("../../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const Spinner_js_1 = require("../../../../components/Spinner.js");
const StepBar_js_1 = require("../../../../components/StepBar.js");
const SwitchNetwork_js_1 = require("../../../../components/SwitchNetwork.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const elements_js_1 = require("../../../../design-system/elements.js");
const Stepper_js_1 = require("../Stepper.js");
const SwapSummary_js_1 = require("./SwapSummary.js");
const pendingSwapTx_js_1 = require("./pendingSwapTx.js");
/**
 * @internal
 */
function SwapConfirmationScreen(props) {
    const approveTxRequired = props.quote.approvalData &&
        props.preApprovedAmount !== undefined &&
        props.preApprovedAmount < BigInt(props.quote.approvalData.amountWei);
    const needsApprovalStep = approveTxRequired && !props.payer.account.sendBatchTransaction;
    const initialStep = needsApprovalStep ? "approval" : "swap";
    const [step, setStep] = (0, react_1.useState)(initialStep);
    const [status, setStatus] = (0, react_1.useState)("idle");
    const receiver = props.quote.swapDetails.toAddress;
    const sender = props.quote.swapDetails.fromAddress;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.title, onBack: props.onBack }), props.isFiatFlow ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(StepBar_js_1.StepBar, { steps: 2, currentStep: 2 }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "xs", children: ["Step 2 of 2 - Converting ", props.fromTokenSymbol, " to", " ", props.toTokenSymbol] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: "Confirm payment" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] })), (0, jsx_runtime_1.jsx)(SwapSummary_js_1.SwapSummary, { sender: sender, receiver: receiver, client: props.client, fromToken: props.fromToken, fromChain: props.fromChain, toToken: props.toToken, toChain: props.toChain, fromAmount: props.fromAmount, toAmount: props.toAmount }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), needsApprovalStep && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { gap: "sm", flex: "row", style: {
                            justifyContent: "space-between",
                        }, center: "y", color: "accentText", children: [(0, jsx_runtime_1.jsx)(Stepper_js_1.Step, { isDone: step === "swap", isActive: step === "approval", label: step === "approval" ? "Approve" : "Approved" }), (0, jsx_runtime_1.jsx)(exports.ConnectorLine, {}), (0, jsx_runtime_1.jsx)(Stepper_js_1.Step, { isDone: false, label: "Confirm", isActive: step === "swap" })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] })), status === "error" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "both", color: "danger", children: [(0, jsx_runtime_1.jsx)(react_icons_1.CrossCircledIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "sm", children: step === "approval" ? "Failed to Approve" : "Failed to Confirm" })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] })), props.payer.chain.id !== props.fromChain.id ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(SwitchNetwork_js_1.SwitchNetworkButton, { fullWidth: true, variant: "accent", switchChain: async () => {
                            await props.payer.wallet.switchChain(props.fromChain);
                        } })] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "accent", fullWidth: true, disabled: status === "pending", onClick: async () => {
                            const wallet = props.payer.wallet;
                            // in case the wallet is not on the same chain as the fromToken, switch to it
                            if (wallet.getChain()?.id !== props.fromChain.id) {
                                await wallet.switchChain(props.fromChain);
                            }
                            const account = wallet.getAccount();
                            if (!account) {
                                throw new Error("Payer wallet has no account");
                            }
                            if (step === "approval" && props.quote.approvalData) {
                                try {
                                    setStatus("pending");
                                    (0, pay_js_1.trackPayEvent)({
                                        event: "prompt_swap_approval",
                                        client: props.client,
                                        walletAddress: account.address,
                                        walletType: wallet.id,
                                        fromToken: props.quote.swapDetails.fromToken.tokenAddress,
                                        fromAmount: props.quote.swapDetails.fromAmountWei,
                                        toToken: props.quote.swapDetails.toToken.tokenAddress,
                                        toAmount: props.quote.swapDetails.toAmountWei,
                                        chainId: props.quote.swapDetails.fromToken.chainId,
                                        dstChainId: props.quote.swapDetails.toToken.chainId,
                                    });
                                    const transaction = (0, approve_js_1.approve)({
                                        contract: (0, contract_js_1.getContract)({
                                            client: props.client,
                                            address: props.quote.swapDetails.fromToken.tokenAddress,
                                            chain: props.fromChain,
                                        }),
                                        spender: props.quote.approvalData.spenderAddress,
                                        amountWei: BigInt(props.quote.approvalData.amountWei),
                                    });
                                    const tx = await (0, send_transaction_js_1.sendTransaction)({
                                        account: account,
                                        transaction,
                                    });
                                    await (0, wait_for_tx_receipt_js_1.waitForReceipt)({ ...tx, maxBlocksWaitTime: 50 });
                                    (0, pay_js_1.trackPayEvent)({
                                        event: "swap_approval_success",
                                        client: props.client,
                                        walletAddress: account.address,
                                        walletType: wallet.id,
                                        fromToken: props.quote.swapDetails.fromToken.tokenAddress,
                                        fromAmount: props.quote.swapDetails.fromAmountWei,
                                        toToken: props.quote.swapDetails.toToken.tokenAddress,
                                        toAmount: props.quote.swapDetails.toAmountWei,
                                        chainId: props.quote.swapDetails.fromToken.chainId,
                                        dstChainId: props.quote.swapDetails.toToken.chainId,
                                    });
                                    setStep("swap");
                                    setStatus("idle");
                                }
                                catch (e) {
                                    console.error(e);
                                    setStatus("error");
                                }
                            }
                            if (step === "swap") {
                                setStatus("pending");
                                try {
                                    (0, pay_js_1.trackPayEvent)({
                                        event: "prompt_swap_execution",
                                        client: props.client,
                                        walletAddress: account.address,
                                        walletType: wallet.id,
                                        fromToken: props.quote.swapDetails.fromToken.tokenAddress,
                                        fromAmount: props.quote.swapDetails.fromAmountWei,
                                        toToken: props.quote.swapDetails.toToken.tokenAddress,
                                        toAmount: props.quote.swapDetails.toAmountWei,
                                        chainId: props.quote.swapDetails.fromToken.chainId,
                                        dstChainId: props.quote.swapDetails.toToken.chainId,
                                    });
                                    const tx = props.quote.transactionRequest;
                                    let _swapTx;
                                    // check if we can batch approval and swap
                                    const canBatch = account.sendBatchTransaction;
                                    if (canBatch &&
                                        props.quote.approvalData &&
                                        approveTxRequired) {
                                        const approveTx = (0, approve_js_1.approve)({
                                            contract: (0, contract_js_1.getContract)({
                                                client: props.client,
                                                address: props.quote.swapDetails.fromToken.tokenAddress,
                                                chain: props.fromChain,
                                            }),
                                            spender: props.quote.approvalData.spenderAddress,
                                            amountWei: BigInt(props.quote.approvalData.amountWei),
                                        });
                                        _swapTx = await (0, send_batch_transaction_js_1.sendBatchTransaction)({
                                            account: account,
                                            transactions: [approveTx, tx],
                                        });
                                    }
                                    else {
                                        _swapTx = await (0, send_transaction_js_1.sendTransaction)({
                                            account: account,
                                            transaction: tx,
                                        });
                                    }
                                    (0, pay_js_1.trackPayEvent)({
                                        event: "swap_execution_success",
                                        client: props.client,
                                        walletAddress: account.address,
                                        walletType: wallet.id,
                                        fromToken: props.quote.swapDetails.fromToken.tokenAddress,
                                        fromAmount: props.quote.swapDetails.fromAmountWei,
                                        toToken: props.quote.swapDetails.toToken.tokenAddress,
                                        toAmount: props.quote.swapDetails.toAmountWei,
                                        chainId: props.quote.swapDetails.fromToken.chainId,
                                        dstChainId: props.quote.swapDetails.toToken.chainId,
                                    });
                                    // do not add pending tx if the swap is part of fiat flow
                                    if (!props.isFiatFlow) {
                                        (0, pendingSwapTx_js_1.addPendingTx)({
                                            type: "swap",
                                            txHash: _swapTx.transactionHash,
                                            chainId: _swapTx.chain.id,
                                        });
                                    }
                                    props.setSwapTxHash(_swapTx.transactionHash);
                                }
                                catch (e) {
                                    console.error(e);
                                    setStatus("error");
                                }
                            }
                        }, gap: "xs", children: [step === "approval" &&
                                (status === "pending" ? "Approving" : "Approve"), step === "swap" &&
                                (status === "pending" ? "Confirming" : "Confirm"), status === "pending" && ((0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "accentButtonText" }))] })] }))] }));
}
exports.ConnectorLine = (0, elements_js_1.StyledDiv)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        height: "4px",
        background: theme.colors.borderColor,
        flex: 1,
    };
});
//# sourceMappingURL=ConfirmationScreen.js.map