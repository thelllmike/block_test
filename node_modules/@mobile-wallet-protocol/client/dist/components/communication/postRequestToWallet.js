"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postRequestToWallet = postRequestToWallet;
const WebBrowser = __importStar(require("expo-web-browser"));
const encoding_1 = require("./utils/encoding");
const encoding_2 = require("./utils/encoding");
const error_1 = require("../../core/error");
/**
 * Posts a request to a wallet and waits for the response.
 *
 * @param request - The request to send.
 * @param wallet - The wallet to send the request to.
 * @returns A promise that resolves to the response.
 */
async function postRequestToWallet(request, appCustomScheme, wallet) {
    const { type, scheme } = wallet;
    if (type === 'web') {
        return new Promise((resolve, reject) => {
            // 1. generate request URL
            const requestUrl = new URL(scheme);
            requestUrl.search = (0, encoding_2.encodeRequestURLParams)(request);
            // 2. send request via Expo WebBrowser
            WebBrowser.openAuthSessionAsync(requestUrl.toString(), appCustomScheme, {
                preferEphemeralSession: false,
            })
                .then((result) => {
                if (result.type === 'cancel') {
                    // iOS only: user cancelled the request
                    reject(error_1.standardErrors.provider.userRejectedRequest());
                    WebBrowser.dismissBrowser();
                }
                if (result.type === 'success') {
                    const { searchParams } = new URL(result.url);
                    const response = (0, encoding_1.decodeResponseURLParams)(searchParams);
                    resolve(response);
                }
            })
                .catch(() => {
                reject(error_1.standardErrors.provider.userRejectedRequest());
                WebBrowser.dismissBrowser();
            });
        });
    }
    if (type === 'native') {
        throw new Error('Native wallet not supported yet');
    }
    throw new Error('Unsupported wallet type');
}
