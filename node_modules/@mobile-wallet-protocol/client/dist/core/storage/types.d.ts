export interface KeyValueStorage {
    storeObject<T>(key: string, item: T): Promise<void>;
    loadObject<T>(key: string): Promise<T | undefined>;
    setItem(key: string, value: string): Promise<void>;
    getItem(key: string): Promise<string | null>;
    removeItem(key: string): Promise<void>;
    clear(): Promise<void>;
}
export type Scope = string;
export declare abstract class ScopedStorage {
    private scope;
    private module;
    constructor(scope: Scope, module: string | undefined);
    scopedKey(key: string): string;
}
